const { FiberClient, FiberSDK } = require("../dist.commonjs/index.js");
const crypto = require("crypto");

// Generate random payment_preimage
function generatePaymentPreimage() {
  const randomBytes = crypto.randomBytes(32);
  return "0x" + randomBytes.toString("hex");
}

// Custom error handling function
function handleRPCError(error) {
  if (error.error && error.error.code === -32601) {
    console.error(
      "Error: Node may not be running or RPC method does not exist",
    );
    console.error("Please ensure:");
    console.error("1. Fiber node is started");
    console.error(
      "2. Node RPC address is correct (current: http://127.0.0.1:8227)",
    );
    console.error("3. Node RPC interface is available");
  } else if (error.error && error.error.code === -32602) {
    console.error("Error: Invalid parameters");
    console.error("Please check:");
    console.error("1. Parameter types are correct");
    console.error("2. Parameter values are within valid range");
    console.error("3. All required parameters are provided");
  } else {
    console.error("RPC Error:", error.message);
    if (error.error && error.error.data) {
      console.error("Error details:", error.error.data);
    }
  }
}

// Convert hexadecimal string to number
function hexToNumber(hex) {
  return parseInt(hex.replace("0x", ""), 16);
}

async function testNewInvoice() {
  try {
    // Initialize SDK
    const sdk = new FiberSDK({
      endpoint: "http://127.0.0.1:8227",
      timeout: 5000,
    });

    console.log("Starting new invoice test...\n");

    try {
      // Create new invoice
      console.log("Calling new_invoice method...");
      const amount = 100000000; // 100,000,000
      const response = await sdk.invoice.newInvoice({
        amount: `0x${amount.toString(16)}`, // Convert amount to hexadecimal
        currency: "Fibt",
        description: "test invoice generated by node2",
        expiry: "0xe10",
        final_cltv: "0x28",
        payment_preimage: generatePaymentPreimage(),
        hash_algorithm: "sha256",
      });
      console.log("Invoice created successfully:");
      console.log("Payment Hash:", response.payment_hash);
      console.log("Amount:", response.amount);
      console.log("Description:", response.description);
      console.log("Expiry:", response.expiry);
      console.log(
        "Created At:",
        new Date(response.created_at).toLocaleString(),
      );

      return response;
    } catch (error) {
      if (error.error) {
        handleRPCError(error);
      } else {
        console.error("Failed to create invoice:", error.message);
      }
      return null;
    }
  } catch (error) {
    if (error.error) {
      handleRPCError(error);
    } else {
      console.error("Error during test:", error.message);
    }
    return null;
  }
}

async function testParseInvoice() {
  try {
    // Initialize SDK
    const sdk = new FiberSDK({
      endpoint: "http://127.0.0.1:8227",
      timeout: 5000,
    });

    console.log("Starting test parsing invoice...\n");

    try {
      console.log("Calling parseInvoice method...");
      const invoice = await sdk.invoice.parseInvoice(
        "fibt1000000001pcsaug0p0exgfw0pnm6vk0rnt4xefskmrz0k2vqxr4lnrms60qasvc54jagg2hk8v40k88exmp04pn5cpcnrcsw5lk9w0w6l0m3k84e2ax4v6gq9ne2n77u4p8h3npx6tuufqftq8eyqxw9t4upaw4f89xukcee79rm0p0jv92d5ckq7pmvm09ma3psheu3rfyy9atlrdr4el6ys8yqurl2m74msuykljp35j0s47vpw8h3crfp5ldp8kp4xlusqk6rad3ssgwn2a429qlpgfgjrtj3gzy26w50cy7gypgjm6mjgaz2ff5q4am0avf6paxja2gh2wppjagqlg466yzty0r0pfz8qpuzqgq43mkgx",
      );
      console.log("Parsing result:", JSON.stringify(invoice, null, 2));
    } catch (error) {
      if (error.error) {
        handleRPCError(error);
      } else {
        console.error("Failed to parse invoice:", error.message);
      }
    }

    console.log("\nTest completed!");
  } catch (error) {
    if (error.error) {
      handleRPCError(error);
    } else {
      console.error("Test failed:", error.message);
    }
  }
}

async function testGetInvoice() {
  try {
    // Initialize SDK
    const sdk = new FiberSDK({
      endpoint: "http://127.0.0.1:8227",
      timeout: 5000,
    });

    console.log("\nStarting get invoice test...\n");

    try {
      // Get invoice
      const invoice = await testNewInvoice();
      if (!invoice) {
        console.log("No invoice available to retrieve");
        return;
      }

      console.log("Calling get_invoice method...");
      const invoiceInfo = await sdk.invoice.getInvoice(invoice.payment_hash);

      // Output invoice information
      console.log("\nInvoice details:");
      console.log("Status:", invoiceInfo.status);
      console.log("Invoice Address:", invoiceInfo.invoice_address);
      console.log("Payment Hash:", invoiceInfo.invoice.payment_hash);
      console.log("Amount:", invoiceInfo.invoice.amount);
      console.log("Description:", invoiceInfo.invoice.description);
      console.log("Expiry:", invoiceInfo.invoice.expiry);
      console.log(
        "Created At:",
        new Date(invoiceInfo.invoice.created_at).toLocaleString(),
      );
    } catch (error) {
      if (error.error) {
        handleRPCError(error);
      } else {
        console.error("Failed to get invoice:", error.message);
      }
    }
  } catch (error) {
    if (error.error) {
      handleRPCError(error);
    } else {
      console.error("Test failed:", error.message);
    }
  }
}

async function testCancelInvoice() {
  try {
    // Initialize SDK
    const sdk = new FiberSDK({
      endpoint: "http://127.0.0.1:8227",
      timeout: 5000,
    });

    console.log("\nStarting cancel invoice test...\n");

    try {
      // Get invoice to cancel
      const invoice = await testNewInvoice();
      if (!invoice) {
        console.log("No invoice available to cancel");
        return;
      }

      console.log("Calling cancel_invoice method...");
      await sdk.invoice.cancelInvoice(invoice.payment_hash);
      console.log("Invoice cancelled successfully");

      // Verify invoice status
      console.log("\nVerifying invoice status...");
      const cancelledInvoice = await sdk.invoice.getInvoice(
        invoice.payment_hash,
      );
      console.log(
        "Invoice status after cancellation:",
        cancelledInvoice.status,
      );
    } catch (error) {
      if (error.error) {
        handleRPCError(error);
      } else {
        console.error("Failed to cancel invoice:", error.message);
      }
    }
  } catch (error) {
    if (error.error) {
      handleRPCError(error);
    } else {
      console.error("Test failed:", error.message);
    }
  }
}

// Run tests
console.log("Starting invoice-related tests...\n");

async function main() {
  await testNewInvoice();
  await testParseInvoice();
  await testGetInvoice();
  await testCancelInvoice();
}

main()
  .then(() => console.log("\nAll tests completed!"))
  .catch(console.error);
